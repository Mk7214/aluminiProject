generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("SAMPLE_MONGO_URL")
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  name       String
  email      String   @unique
  regNo      String   @unique
  password   String
  profilepic Bytes?
  course     String
  batch      String

  // a user can have many comments and many upvotes
  Like      Like[]
  comments  Comment[]
  upvotes   UpVote[]
  Requests  Requests[]
  Donations Donations[]
}

model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique
  password String
}

model Record {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  regNo  String @unique
  name   String
  course String
  batch  String
}

model Donations {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  trancationId String   @unique
  dateTime     String
  createdAt    DateTime @default(now())
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Requests {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  status      RequestStatus @default(PENDING)
  email       String
  title       String
  topic       String
  description String
  datetime    String
  userId      String        @db.ObjectId
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model Event {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  title       String
  description String
  time        String
  photos      Photos[]
  comments    Comment[]
  like        Like[]
}

model Photos {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  path         String
  eventId      String   @db.ObjectId
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  size         Int
  mimetype     String
  originalname String
  filename     String
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  eventId   String   @db.ObjectId
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId]) //this makes sure that each user have a single like 
}

model Comment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  commentMessage String
  createdAt      DateTime @default(now())
  //relations 
  eventId        String   @db.ObjectId
  event          Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId         String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  upvotes        UpVote[]
}

model UpVote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  //user reference
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  //comment reference
  commentId String   @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId]) //this makes sure that each user have a single upvote for a comment
}
